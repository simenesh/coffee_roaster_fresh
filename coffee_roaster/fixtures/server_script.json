[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-18 16:05:25.153423",
  "module": "roaster",
  "name": "cylinder",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Roast Batch",
  "script": "# DocType: Roast Batch\n# Event: After Submit  (use Before Submit if you prefer)\n\ndef to_float(v):\n    try:\n        return float(v) if v not in (None, \"\") else 0.0\n    except Exception:\n        return 0.0\n\ndef item_flags(item_code):\n    rec = frappe.db.get_value(\"Item\", item_code, [\"has_batch_no\",\"has_serial_no\"], as_dict=True) or {}\n    return bool(rec.get(\"has_batch_no\")), bool(rec.get(\"has_serial_no\"))\n\ndef ensure_batch(item_code, label):\n    # Create or reuse a batch for finished goods\n    ex = frappe.db.get_value(\"Batch\", {\"item\": item_code, \"batch_id\": label}, \"name\")\n    if ex: return ex\n    b = frappe.new_doc(\"Batch\")\n    b.item = item_code\n    b.batch_id = label\n    b.insert(ignore_permissions=True)\n    return b.name\n\ndef pick_batch_with_stock(item_code, warehouse):\n    # Oldest batch with positive balance at warehouse\n    row = frappe.db.sql(\"\"\"\n      SELECT sle.batch_no\n      FROM `tabStock Ledger Entry` sle\n      WHERE sle.item_code=%s AND sle.warehouse=%s AND IFNULL(sle.batch_no,'')!=''\n      GROUP BY sle.batch_no\n      HAVING SUM(sle.actual_qty) > 0\n      ORDER BY MIN(sle.posting_date), MIN(sle.creation)\n      LIMIT 1\n    \"\"\", (item_code, warehouse))\n    return row[0][0] if row else None\n\n# --- Build the Manufacture Stock Entry ---\nse = frappe.new_doc(\"Stock Entry\")\nse.stock_entry_type = \"Manufacture\"\nse.company = doc.company\nse.posting_date = doc.roast_date\n\n# FINISHED GOOD\nfg_qty = to_float((doc.get(\"total_output_qty\") or 0))\nfg = se.append(\"items\", {\n    \"item_code\": doc.roasted_item,\n    \"t_warehouse\": doc.target_warehouse,\n    \"is_finished_item\": 1,\n    \"qty\": fg_qty\n})\nfg_is_batch, fg_is_serial = item_flags(doc.roasted_item)\nif fg_is_batch:\n    fg.batch_no = ensure_batch(doc.roasted_item, f\"RB-{doc.name}\")\nif fg_is_serial:\n    if not (doc.get(\"fg_serials\") or \"\"):\n        frappe.throw(f\"Serial No is mandatory for finished item {doc.roasted_item}. Fill 'FG Serials' (one per line).\")\n    fg.serial_no = doc.fg_serials\n\n# RAW MATERIAL (ETH-SID-G1 likely here)\nrm_qty = to_float((doc.get(\"total_input_qty\") or 0))\nrm = se.append(\"items\", {\n    \"item_code\": doc.green_bean_item,\n    \"s_warehouse\": doc.source_warehouse,\n    \"qty\": rm_qty\n})\nrm_is_batch, rm_is_serial = item_flags(doc.green_bean_item)\nif rm_is_batch:\n    batch = ((doc.get(\"green_batch\") or None)\n             or pick_batch_with_stock(doc.green_bean_item, doc.source_warehouse))\n    if not batch:\n        frappe.throw(f\"Batch is mandatory for raw material {doc.green_bean_item} and no batch with stock was found in {doc.source_warehouse}. Set 'Green Batch' on Roast Batch.\")\n    rm.batch_no = batch\nif rm_is_serial:\n    if not (doc.get(\"green_serials\") or \"\"):\n        frappe.throw(f\"Serial No is mandatory for raw material {doc.green_bean_item}. Fill 'Green Serials' (one per line).\")\n    rm.serial_no = doc.green_serials\n\nse.insert(ignore_permissions=True)\nse.submit()\n\n",
  "script_type": "DocType Event"
 }
]