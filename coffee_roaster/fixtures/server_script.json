[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-18 16:05:25.153423",
  "module": "roaster",
  "name": "cylinder",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Roast Batch",
  "script": "# DocType: Roast Batch\n# Event: After Submit  (use Before Submit if you prefer)\n\ndef to_float(v):\n    try:\n        return float(v) if v not in (None, \"\") else 0.0\n    except Exception:\n        return 0.0\n\ndef item_flags(item_code):\n    rec = frappe.db.get_value(\"Item\", item_code, [\"has_batch_no\",\"has_serial_no\"], as_dict=True) or {}\n    return bool(rec.get(\"has_batch_no\")), bool(rec.get(\"has_serial_no\"))\n\ndef ensure_batch(item_code, label):\n    # Create or reuse a batch for finished goods\n    ex = frappe.db.get_value(\"Batch\", {\"item\": item_code, \"batch_id\": label}, \"name\")\n    if ex: return ex\n    b = frappe.new_doc(\"Batch\")\n    b.item = item_code\n    b.batch_id = label\n    b.insert(ignore_permissions=True)\n    return b.name\n\ndef pick_batch_with_stock(item_code, warehouse):\n    # Oldest batch with positive balance at warehouse\n    row = frappe.db.sql(\"\"\"\n      SELECT sle.batch_no\n      FROM `tabStock Ledger Entry` sle\n      WHERE sle.item_code=%s AND sle.warehouse=%s AND IFNULL(sle.batch_no,'')!=''\n      GROUP BY sle.batch_no\n      HAVING SUM(sle.actual_qty) > 0\n      ORDER BY MIN(sle.posting_date), MIN(sle.creation)\n      LIMIT 1\n    \"\"\", (item_code, warehouse))\n    return row[0][0] if row else None\n\n# --- Build the Manufacture Stock Entry ---\nse = frappe.new_doc(\"Stock Entry\")\nse.stock_entry_type = \"Manufacture\"\nse.company = doc.company\nse.posting_date = doc.roast_date\n\n# FINISHED GOOD\nfg_qty = to_float((doc.get(\"total_output_qty\") or 0))\nfg = se.append(\"items\", {\n    \"item_code\": doc.roasted_item,\n    \"t_warehouse\": doc.target_warehouse,\n    \"is_finished_item\": 1,\n    \"qty\": fg_qty\n})\nfg_is_batch, fg_is_serial = item_flags(doc.roasted_item)\nif fg_is_batch:\n    fg.batch_no = ensure_batch(doc.roasted_item, f\"RB-{doc.name}\")\nif fg_is_serial:\n    if not (doc.get(\"fg_serials\") or \"\"):\n        frappe.throw(f\"Serial No is mandatory for finished item {doc.roasted_item}. Fill 'FG Serials' (one per line).\")\n    fg.serial_no = doc.fg_serials\n\n# RAW MATERIAL (ETH-SID-G1 likely here)\nrm_qty = to_float((doc.get(\"total_input_qty\") or 0))\nrm = se.append(\"items\", {\n    \"item_code\": doc.green_bean_item,\n    \"s_warehouse\": doc.source_warehouse,\n    \"qty\": rm_qty\n})\nrm_is_batch, rm_is_serial = item_flags(doc.green_bean_item)\nif rm_is_batch:\n    batch = ((doc.get(\"green_batch\") or None)\n             or pick_batch_with_stock(doc.green_bean_item, doc.source_warehouse))\n    if not batch:\n        frappe.throw(f\"Batch is mandatory for raw material {doc.green_bean_item} and no batch with stock was found in {doc.source_warehouse}. Set 'Green Batch' on Roast Batch.\")\n    rm.batch_no = batch\nif rm_is_serial:\n    if not (doc.get(\"green_serials\") or \"\"):\n        frappe.throw(f\"Serial No is mandatory for raw material {doc.green_bean_item}. Fill 'Green Serials' (one per line).\")\n    rm.serial_no = doc.green_serials\n\nse.insert(ignore_permissions=True)\nse.submit()\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-18 16:16:52.659566",
  "module": null,
  "name": "cylinder 2",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Roast Batch",
  "script": "# DocType: Roast Batch\n# Event: After Submit\n# Purpose: Create Stock Entry for the roast (server-script safe: no imports, no tuple-unpack, no .format)\n\ndef to_float(val):\n    try:\n        return float(val) if val not in (None, \"\") else 0.0\n    except Exception:\n        return 0.0\n\ndef pick_batch_with_stock(item_code, warehouse):\n    rows = frappe.db.sql(\"\"\"\n        SELECT sle.batch_no\n        FROM `tabStock Ledger Entry` sle\n        WHERE sle.item_code=%s AND sle.warehouse=%s AND IFNULL(sle.batch_no,'')!=''\n        GROUP BY sle.batch_no\n        HAVING SUM(sle.actual_qty) > 0\n        ORDER BY MIN(sle.posting_date), MIN(sle.creation)\n        LIMIT 1\n    \"\"\", (item_code, warehouse))\n    return rows[0][0] if rows else None\n\ndef ensure_batch(item_code, preferred_id):\n    existing = frappe.db.get_value(\"Batch\", {\"item\": item_code, \"batch_id\": preferred_id}, \"name\")\n    if existing:\n        return existing\n    b = frappe.new_doc(\"Batch\")\n    b.item = item_code\n    b.batch_id = preferred_id  # v15 field\n    b.insert(ignore_permissions=True)\n    return b.name\n\n# ---------- duplicate guard ----------\nremark = \"Roast Batch \" + doc.name\nexisting_list = frappe.get_all(\"Stock Entry\", filters={\"docstatus\": 1, \"remarks\": remark}, pluck=\"name\")\n\n# optional backlink if an SE already exists\nif existing_list and frappe.get_meta(\"Roast Batch\").get_field(\"stock_entry\"):\n    frappe.db.set_value(\"Roast Batch\", doc.name, \"stock_entry\", existing_list[0], update_modified=False)\n\n# only proceed if NOT already created\nif not existing_list:\n\n    # ---------- inputs from Roast Batch ----------\n    company = doc.get(\"company\") or frappe.db.get_single_value(\"Global Defaults\", \"default_company\")\n\n    fg_item = (doc.get(\"roasted_item\") or doc.get(\"fg_item\") or\n               doc.get(\"finished_item\") or doc.get(\"output_item\") or doc.get(\"item_code\"))\n    fg_wh   = (doc.get(\"target_warehouse\") or doc.get(\"fg_warehouse\") or\n               doc.get(\"finished_goods_warehouse\") or doc.get(\"output_warehouse\"))\n    fg_qty  = to_float(doc.get(\"total_output_qty\") or doc.get(\"output_qty\") or doc.get(\"qty\"))\n\n    rm_item = doc.get(\"green_bean_item\") or doc.get(\"rm_item\")\n    rm_wh   = doc.get(\"source_warehouse\") or doc.get(\"s_warehouse\")\n    rm_qty  = to_float(doc.get(\"total_input_qty\") or doc.get(\"input_qty\"))\n\n    if not company:\n        frappe.throw(\"Company not found on Roast Batch or Global Defaults.\")\n    if (not fg_item) or (not fg_wh) or (fg_qty <= 0):\n        frappe.throw(\"Finished Good details missing. Need roasted_item (or equivalent), target_warehouse, and output qty > 0.\")\n\n    has_rm = (bool(rm_item) and bool(rm_wh) and (rm_qty > 0))\n\n    # ---------- build stock entry ----------\n    se = frappe.new_doc(\"Stock Entry\")\n    se.company = company\n    se.remarks = remark\n    se.posting_date = doc.get(\"roast_date\") or frappe.utils.nowdate()\n    se.stock_entry_type = \"Manufacture\" if has_rm else \"Material Receipt\"\n\n    # Raw Material (optional)\n    if has_rm:\n        rm_row = se.append(\"items\", {})\n        rm_row.item_code = rm_item\n        rm_row.s_warehouse = rm_wh\n        rm_row.qty = rm_qty\n        rm_row.uom = frappe.db.get_value(\"Item\", rm_item, \"stock_uom\")\n        rm_row.conversion_factor = 1\n\n        rm_is_batch = bool(frappe.db.get_value(\"Item\", rm_item, \"has_batch_no\"))\n        rm_is_serial = bool(frappe.db.get_value(\"Item\", rm_item, \"has_serial_no\"))\n        if rm_is_batch:\n            chosen = (doc.get(\"green_batch\") or pick_batch_with_stock(rm_item, rm_wh))\n            if not chosen:\n                frappe.throw(\"No batch with stock found for \" + rm_item + \" in \" + rm_wh + \". Set Green Batch on Roast Batch or stock a batch.\")\n            rm_row.batch_no = chosen\n        if rm_is_serial:\n            ser = doc.get(\"green_serials\")\n            if not ser:\n                frappe.throw(\"Serial No is mandatory for raw material \" + rm_item + \". Fill 'Green Serials'.\")\n            rm_row.serial_no = ser\n\n    # Finished Good\n    fg_row = se.append(\"items\", {})\n    fg_row.item_code = fg_item\n    fg_row.t_warehouse = fg_wh\n    fg_row.qty = fg_qty\n    fg_row.uom = frappe.db.get_value(\"Item\", fg_item, \"stock_uom\")\n    fg_row.conversion_factor = 1\n    fg_row.is_finished_item = 1 if has_rm else 0\n\n    fg_is_batch = bool(frappe.db.get_value(\"Item\", fg_item, \"has_batch_no\"))\n    fg_is_serial = bool(frappe.db.get_value(\"Item\", fg_item, \"has_serial_no\"))\n    if fg_is_batch:\n        fg_row.batch_no = ensure_batch(fg_item, \"RB-\" + doc.name)\n    if fg_is_serial:\n        ser_fg = doc.get(\"fg_serials\")\n        if not ser_fg:\n            frappe.throw(\"Serial No is mandatory for finished item \" + fg_item + \". Fill 'FG Serials'.\")\n        fg_row.serial_no = ser_fg\n\n    se.insert(ignore_permissions=True)\n    se.submit()\n\n    # optional backlink (doesn't bump modified)\n    if frappe.get_meta(\"Roast Batch\").get_field(\"stock_entry\"):\n        frappe.db.set_value(\"Roast Batch\", doc.name, \"stock_entry\", se.name, update_modified=False)\n",
  "script_type": "DocType Event"
 }
]