[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 0,
  "modified": "2025-09-02 10:46:08.367560",
  "module": "roaster",
  "name": "customer location map subcity",
  "script": "// Minimal & safe: auto-fill latitude/longitude when Sub-City is set.\n// No external libraries. Tolerates missing fields. Won't overwrite existing coords.\n\nfrappe.ui.form.on(\"Customer\", {\n  sub_city(frm) {\n    try {\n      const sub = (frm.doc.sub_city || \"\").trim();\n      if (!sub) return;\n\n      const hasLatField = \"latitude\" in (frm.doc || {});\n      const hasLngField = \"longitude\" in (frm.doc || {});\n      if (!hasLatField && !hasLngField) return; // nothing to fill\n\n      // If coords already present, don't overwrite\n      const haveCoords =\n        Number.isFinite(Number(frm.doc.latitude)) &&\n        Number.isFinite(Number(frm.doc.longitude));\n      if (haveCoords) return;\n\n      // Query biased to Addis Ababa; tweak if your customers are elsewhere.\n      const q = `${sub} Sub City, Addis Ababa, Ethiopia`;\n      const url =\n        \"https://nominatim.openstreetmap.org/search?format=json&limit=1&countrycodes=et&q=\" +\n        encodeURIComponent(q);\n\n      fetch(url, { headers: { \"Accept-Language\": \"en\" } })\n        .then((r) => r.json())\n        .then((items) => {\n          if (!Array.isArray(items) || !items.length) return;\n          const lat = parseFloat(items[0].lat);\n          const lon = parseFloat(items[0].lon);\n          if (Number.isFinite(lat) && Number.isFinite(lon)) {\n            if (hasLatField) frm.set_value(\"latitude\", +lat.toFixed(8));\n            if (hasLngField) frm.set_value(\"longitude\", +lon.toFixed(8));\n            frappe.show_alert({ message: \"Location set from Sub-City.\", indicator: \"green\" });\n          }\n        })\n        .catch((e) => {\n          console.error(\"[Customer] geocode error:\", e);\n          frappe.msgprint({\n            title: \"Geocoding Error\",\n            message:\n              \"Couldn’t fetch coordinates from Sub-City. You can still use GPS or Pick Location.\",\n            indicator: \"red\",\n          });\n        });\n    } catch (e) {\n      console.error(\"[Customer] sub_city handler failed:\", e);\n      frappe.msgprint({\n        title: \"Client Script Error\",\n        message: e && e.message ? e.message : \"Unknown error in Customer script.\",\n        indicator: \"red\",\n      });\n    }\n  },\n\n  // Optional: also auto-geocode once on first load if sub_city is filled and coords empty\n  refresh(frm) {\n    try {\n      const sub = (frm.doc.sub_city || \"\").trim();\n      const haveCoords =\n        Number.isFinite(Number(frm.doc.latitude)) &&\n        Number.isFinite(Number(frm.doc.longitude));\n      if (sub && !haveCoords) {\n        // trigger the handler above\n        frappe.ui.form.trigger(\"Customer\", \"sub_city\");\n      }\n    } catch (e) {\n      console.error(\"[Customer] refresh handler failed:\", e);\n    }\n  },\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "RTM Assignment",
  "enabled": 1,
  "modified": "2025-09-04 15:13:20.937683",
  "module": "roaster",
  "name": "RTM Assignment map",
  "script": "// RTM Assignment — Geo actions: GPS, map picker, manual entry, and open in Maps\n// Place as a Custom Script for DocType \"RTM Assignment\" or as\n// apps/coffee_roaster/coffee_roaster/roaster/doctype/rtm_assignment/rtm_assignment.js\n\nconst LAT_FIELD = 'latitude';   // change if your fieldnames differ\nconst LNG_FIELD = 'longitude';  // change if your fieldnames differ\n\nfrappe.ui.form.on('RTM Assignment', {\n  refresh(frm) {\n    // Add once per load\n    if (frm._geo_buttons_added) return;\n    frm._geo_buttons_added = true;\n\n    const group = __('Geo'); // change to __('Actions') if you prefer that group\n\n    frm.add_custom_button(__('Use My Location (GPS)'), () => useMyLocation(frm), group);\n    frm.add_custom_button(__('Pick on Map'),          () => pickOnMap(frm),      group);\n    frm.add_custom_button(__('Enter Coordinates'),    () => enterCoords(frm),    group);\n    frm.add_custom_button(__('Open in Google Maps'),  () => openInMaps(frm),     group);\n  }\n});\n\n// ---- helpers ---------------------------------------------------------------\nconst round7 = (v) => {\n  const n = Number(v);\n  if (Number.isNaN(n)) return null;\n  return Math.round(n * 1e7) / 1e7; // ~1 cm precision\n};\n\nfunction getLatLng(frm) {\n  const lat = Number(frm.doc[LAT_FIELD]);\n  const lng = Number(frm.doc[LNG_FIELD]);\n  return {\n    lat: Number.isFinite(lat) ? lat : null,\n    lng: Number.isFinite(lng) ? lng : null,\n  };\n}\n\nfunction setLatLng(frm, lat, lng) {\n  const vlat = round7(lat);\n  const vlng = round7(lng);\n  if (vlat == null || vlng == null) {\n    frappe.msgprint(__('Invalid coordinates.'));\n    return;\n  }\n  frm.set_value(LAT_FIELD, vlat);\n  frm.set_value(LNG_FIELD, vlng);\n  frappe.show_alert({ message: __('Location updated'), indicator: 'green' });\n}\n\n// A) Use browser GPS\nfunction useMyLocation(frm) {\n  // Secure context required on most browsers (HTTPS or localhost)\n  if (location.protocol !== 'https:' && location.hostname !== 'localhost') {\n    frappe.msgprint(__('GPS requires HTTPS (or localhost). Open your site over HTTPS and try again.'));\n    return;\n  }\n  if (!navigator.geolocation) {\n    frappe.msgprint(__('Your browser does not support geolocation.'));\n    return;\n  }\n\n  const hide = frappe.ui.toggle_progress(__('Fetching GPS…'), 0, 100);\n  navigator.geolocation.getCurrentPosition(\n    (pos) => {\n      hide();\n      const { latitude, longitude } = pos.coords;\n      setLatLng(frm, latitude, longitude);\n    },\n    (err) => {\n      hide();\n      frappe.msgprint(__('Failed to get GPS: {0}', [err.message || err]));\n    },\n    { enableHighAccuracy: true, timeout: 15000, maximumAge: 0 }\n  );\n}\n\n// B) Pick point on an interactive map (Leaflet + OSM)\nfunction pickOnMap(frm) {\n  const { lat: curLat, lng: curLng } = getLatLng(frm);\n  const fallbackCenter = [9.0108, 38.7613]; // Addis Ababa center-ish\n  const center = [curLat ?? fallbackCenter[0], curLng ?? fallbackCenter[1]];\n\n  const d = new frappe.ui.Dialog({\n    title: __('Pick Location on Map'),\n    size: 'large',\n    fields: [\n      { fieldtype: 'HTML',  fieldname: 'map_html' },\n      { fieldtype: 'Section Break' },\n      { fieldtype: 'Float', fieldname: 'lat', label: __('Latitude'),  reqd: 1, default: curLat },\n      { fieldtype: 'Float', fieldname: 'lng', label: __('Longitude'), reqd: 1, default: curLng },\n    ],\n    primary_action_label: __('Set Location'),\n    primary_action(values) {\n      setLatLng(frm, values.lat, values.lng);\n      d.hide();\n    },\n  });\n\n  d.show();\n\n  // Build the HTML container for the map\n  const wrap = d.get_field('map_html').$wrapper;\n  wrap.css({ height: '380px', border: '1px solid var(--gray-300)', marginBottom: '8px' });\n  const mapId = frappe.dom.get_unique_id('rtm_map_');\n  wrap.attr('id', mapId);\n\n  // Load Leaflet from CDN (or vendor it in your app if CSP blocks CDN)\n  frappe.require([\n    'https://unpkg.com/leaflet@1.9.4/dist/leaflet.css',\n    'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js'\n  ], () => {\n    // Initialize map\n    const map = L.map(mapId).setView(center, 13);\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      maxZoom: 19,\n      attribution: '&copy; OpenStreetMap contributors'\n    }).addTo(map);\n\n    let marker = L.marker(center, { draggable: true }).addTo(map);\n\n    const update = (ll) => {\n      const vlat = round7(ll.lat);\n      const vlng = round7(ll.lng);\n      d.set_value('lat', vlat);\n      d.set_value('lng', vlng);\n      marker.setLatLng([vlat, vlng]);\n    };\n\n    map.on('click', (e) => update(e.latlng));\n    marker.on('dragend', (e) => update(e.target.getLatLng()));\n\n    // Keep dialog fields in sync when user types values\n    d.fields_dict.lat.df.onchange = () => {\n      const lv = round7(d.get_value('lat'));\n      const gv = round7(d.get_value('lng'));\n      if (lv != null && gv != null) update({ lat: lv, lng: gv });\n    };\n    d.fields_dict.lng.df.onchange = d.fields_dict.lat.df.onchange;\n  }, () => {\n    // on error (e.g., CSP), fall back to manual inputs\n    frappe.msgprint(__('Could not load map library. Using manual entry.'));\n  });\n}\n\n// C) Manual coordinates dialog\nfunction enterCoords(frm) {\n  const { lat: curLat, lng: curLng } = getLatLng(frm);\n  const d = new frappe.ui.Dialog({\n    title: __('Enter Coordinates'),\n    fields: [\n      { fieldtype: 'Float', fieldname: 'lat', label: __('Latitude'),  reqd: 1, default: curLat },\n      { fieldtype: 'Float', fieldname: 'lng', label: __('Longitude'), reqd: 1, default: curLng },\n    ],\n    primary_action_label: __('Set Location'),\n    primary_action(values) {\n      setLatLng(frm, values.lat, values.lng);\n      d.hide();\n    },\n  });\n  d.show();\n}\n\n// D) Open current coords in Google Maps\nfunction openInMaps(frm) {\n  const { lat, lng } = getLatLng(frm);\n  if (lat == null || lng == null) {\n    frappe.msgprint(__('Set Latitude and Longitude first.'));\n    return;\n  }\n  const url = `https://www.google.com/maps?q=${lat},${lng}`;\n  window.open(url, '_blank');\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Route Plan",
  "enabled": 1,
  "modified": "2025-09-03 21:03:31.983239",
  "module": "roaster",
  "name": "Route Plan button",
  "script": "frappe.ui.form.on('Route Plan', {\n  refresh: function(frm) {\n    if (!frm._fetch_btn) {\n      frm.add_custom_button(__('Fetch from RTM (auto-order)'), function () {\n        // Collect sub-cities (multiselect, child table, or CSV)\n        var subCities = [];\n        if (Array.isArray(frm.doc.sub_cities)) {\n          subCities = (frm.doc.sub_cities || []).map(function (r) { return r.sub_city; }).filter(Boolean);\n        } else if (frm.doc.sub_cities_csv) {\n          subCities = (frm.doc.sub_cities_csv || '').split(',').map(function (s) { return s.trim(); }).filter(Boolean);\n        }\n\n        // Optional depot coords on the parent (add these fields to your doctype if you like)\n        var depot_lat = frm.doc.depot_latitude || null;\n        var depot_lng  = frm.doc.depot_longitude || null;\n\n        frappe.call({\n          method: 'coffee_roaster.coffee_roaster.api.build_route_from_rtm',\n          args: {\n            sub_cities: subCities,\n            date: frm.doc.date || null,\n            marketer: frm.doc.marketer || null,\n            depot_lat: depot_lat,\n            depot_lng: depot_lng\n          },\n          freeze: true,\n          freeze_message: __('Building route...'),\n          callback: function(r) {\n            if (!r.message) {\n              frappe.msgprint(__('No RTM Assignments found.'));\n              return;\n            }\n            var stops = r.message.stops || [];\n            frm.clear_table('details');\n            stops.forEach(function (row) {\n              var d = frm.add_child('details');\n              d.order_priority = row.seq;          // or 'seq' if your field is named that\n              d.rtm_assignment = row.rtm_assignment;\n              d.customer = row.customer;\n              d.customer_name = row.customer_name;\n              d.sub_city = row.sub_city;\n              d.latitude = row.latitude;\n              d.longitude = row.longitude;\n              d.rtm_channel = row.rtm_channel;\n              d.outlet_type = row.outlet_type;\n              d.marketer = row.marketer;\n              d.priority = row.priority;\n            });\n            frm.refresh_field('details');\n            frappe.show_alert({ message: __('Added {0} stops (weekday: {1})',\n                [stops.length, r.message.weekday || '—']), indicator: 'green' });\n          }\n        });\n      }, __('Actions'));\n      frm._fetch_btn = true;\n    }\n  }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2025-07-14 00:50:16.419832",
  "module": "roaster",
  "name": "Auto Price List on Sales Order",
  "script": "frappe.ui.form.on(\"Sales Order\",{\n    onload(frm){set_price_list(frm);},\n    customer(frm){set_price_list(frm);}  \n});\nfunction set_price_list(frm){\n    if(!frm.doc.customer)return;\n    frappe.db.get_value(\"Customer\",frm.doc.customer,\"customer_channel\")\n        .then(r=>{\n            const ch=r.message.customer_channel;\n            const pl=ch===\"Wholesale\"?\"Coffee Wholesale - ETB\":\"Coffee Retail - ETB\";\n            if(frm.doc.selling_price_list!==pl){frm.set_value(\"selling_price_list\",pl);}\n        });\n}",
  "view": null
 }
]